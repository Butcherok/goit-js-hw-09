{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SACpCC,QAAQC,IAAIJ,GAEZA,EAAKK,iBAAiB,SAOtB,SAAqBC,GACnBC,EAAUD,EAAIE,OAAOC,MAAQH,EAAIE,OAAOE,K,IAP1CV,EAAKK,iBAAiB,UAUtB,SAAsBC,GACpBA,EAAIK,iBAyBN,WACE,MAAMC,EAASL,EAAUK,OACzBC,EAAQC,OAAOP,EAAUQ,OACvB,IAAI,IAAIC,EAAI,EAAGA,EAAIJ,EAAQI,GAAK,EAC9BC,EAAWD,EAAI,EACfH,EAAQC,OAAOP,EAAUQ,OAASD,OAAOP,EAAUW,MAAMF,EACzDG,EAAcF,EAAUJ,GACvBO,MAAK,EAAGC,SAAAC,EAAUP,MAAAQ,MAEjBC,EAAUF,EAAUC,EAAM,IAE3BE,OAAM,EAAGJ,SAAAK,EAAUX,MAAAY,MAClBC,EAASF,EAAUC,EAAM,G,CApC/BE,E,IAVF,IAAItB,EAAY,GACZU,EAAW,KACXJ,EAAQ,KAWZ,SAASM,EAAcW,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,CAACf,SAAAS,EAAUf,MAAAgB,IAEnBM,EAAO,CAAChB,SAAAS,EAAUf,MAAAgB,GAAO,GAE1BA,EAAM,G,CAIb,SAASP,EAAUe,EAAUC,GAC3BC,EAAA3C,GAAS4C,OAAOC,QAAQ,qBAAqBJ,QAAeC,M,CAG9D,SAASZ,EAASgB,EAAUC,GAC1BJ,EAAA3C,GAAS4C,OAAOI,QAAQ,oBAAoBF,QAAeC,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconsole.log(form);\n\nform.addEventListener('input', onInputData);\nform.addEventListener('submit', onSubmitForm);\n\nlet inputData = {};\nlet position = null;\nlet delay = null;\n\nfunction onInputData(evt) {\n  inputData[evt.target.name] = evt.target.value;\n}\n\nfunction onSubmitForm(evt) {\n  evt.preventDefault();\n  amountTimes();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay});\n      } else {\n        reject({position, delay});\n      }\n    }, delay);\n  }); \n}\n\nfunction isFulfill(position, delay) {\n  Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n}\n\nfunction isReject(position, delay) {\n  Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n}\n\nfunction amountTimes() {\n  const amount = inputData.amount;\n  delay = Number(inputData.delay);\n    for(var i = 0; i < amount; i += 1){\n      position = i + 1;\n      delay = Number(inputData.delay) + Number(inputData.step)*i;\n      createPromise(position, delay)\n      .then(({ position, delay }) => {\n        // Notiflix.Notify.closeButton = true\n        isFulfill(position, delay);\n      })\n      .catch(({ position, delay }) => {\n        isReject(position, delay);\n      });    };\n}"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","console","log","addEventListener","evt","$47d4ff9957288465$var$inputData","target","name","value","preventDefault","amount","$47d4ff9957288465$var$delay","Number","delay","i","$47d4ff9957288465$var$position","step","$47d4ff9957288465$var$createPromise","then","position","position4","delay4","$47d4ff9957288465$var$isFulfill","catch","position5","delay5","$47d4ff9957288465$var$isReject","$47d4ff9957288465$var$amountTimes","position1","delay1","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","position2","delay2","$parcel$interopDefault","Notify","success","position3","delay3","failure"],"version":3,"file":"03-promises.e1bbe506.js.map"}